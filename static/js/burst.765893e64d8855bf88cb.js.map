{"version":3,"file":"static/js/burst.765893e64d8855bf88cb.js","mappings":"8JAOIA,E,uDCsEJ,EA5CsB,SAAHC,GAAgE,IAAtDC,EAAMD,EAANC,OAAQC,EAAeF,EAAfE,gBAC5BC,EAA0DF,EAA1DE,KAAMC,EAAoDH,EAApDG,WAAYC,EAAwCJ,EAAxCI,aAAcC,EAA0BL,EAA1BK,IAAGC,EAAuBN,EAArBO,aAAAA,OAAY,IAAAD,EAAG,EAACA,EAG7DE,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAGtBI,GAAsBL,EAAAA,EAAAA,UAASL,GAAaW,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAGD,EAAA,GAAEE,EAAMF,EAAA,GAGZG,GAAeC,EAAAA,EAAAA,QAAuB,MAGtCC,GAAcC,EAAAA,EAAAA,UAAQ,kBAAMnB,EAAKoB,OAASnB,CAAU,GAAE,CAACD,EAAMC,IAG7DoB,GAAkBF,EAAAA,EAAAA,UAAQ,kBAAMjB,EAAeD,CAAU,GAAE,CAACC,EAAcD,IAG1EqB,GAAeC,EAAAA,EAAAA,cAAY,WAAO,IAADC,EAAAC,EAChCC,EAA2C,QAAlCF,EAAuB,QAAvBC,EAAGT,EAAaW,eAAO,IAAAF,OAAA,EAApBA,EAAsBC,iBAAS,IAAAF,EAAAA,EAAI,EAC/Cd,EAAQkB,KAAKC,MAAMH,EAAYzB,GAC/Ba,EAAMc,KAAKE,IAAIpB,EAAQR,EAAcF,EAAKoB,QAEhDT,EAASD,GACTK,EAAOD,EACR,GAAG,CAACd,EAAKoB,OAAQnB,EAAYC,IAE7B,OACC6B,EAAAA,EAAAA,KAAA,OAAKC,IAAKhB,EAAciB,MAAO,CAAEC,OAAQb,EAAiBc,UAAW,QAAUC,SAAUd,EAAae,UACrGN,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEC,OAAQhB,GAAcmB,SAElCrC,EAAKsC,MAAM5B,EAAOI,EAAMT,GAAckC,KAAI,SAACC,GAC3C,OACCT,EAAAA,EAAAA,KAAA,OAAkCE,MAAO,CAAEQ,UAAU,cAADC,OAAgBhC,EAAQT,EAAU,QAAQoC,SAC5FtC,EAAgByC,IADRA,EAAKrC,GAIjB,OAIJ,E,WD/BMwC,EAAiB,SAAH9C,EAAkEmC,GAAkD,IAA1GjC,EAAeF,EAAfE,gBAAiBD,EAAMD,EAANC,OACtC8C,EAA4B9C,EAA5B8C,IAAKC,EAAuB/C,EAAvB+C,cAAe1C,EAAQL,EAARK,IAEtB2C,GAAQ7B,EAAAA,EAAAA,QAAO,GAGrBX,GAAwBC,EAAAA,EAAAA,UAAc,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlCyC,EAAIvC,EAAA,GAAEwC,EAAOxC,EAAA,GAGdyC,GAAqBhC,EAAAA,EAAAA,SAAO,GAG5BiC,EAAetB,KAAKuB,KAAKP,EAAIxB,OAASyB,GAGtCO,GAAa7B,EAAAA,EAAAA,cAAY,WAE9B,IAAI0B,EAAmBtB,QAAvB,CAGA,GAAImB,EAAMnB,SAAWuB,EACpB,OAAOG,OAAOC,mBAAmB1D,GAIlC,IAAM2D,EAAWX,EAAIN,MAAMQ,EAAMnB,QAAUkB,GAAgBC,EAAMnB,QAAU,GAAKkB,GAGhFG,GAAQ,SAACQ,GACR,MAAM,GAANd,QAAAe,EAAAA,EAAAA,GAAWD,IAAKC,EAAAA,EAAAA,GAAKF,GACtB,IAGAT,EAAMnB,SAAW,EACjB/B,EAAqB8D,qBACpB,WACCN,GACD,GACA,CACCO,QAAS,MAtB2B,CAyBvC,GAAG,IAiBH,OAdAC,EAAAA,EAAAA,qBAAoB5B,GAAK,WACxB,MAAO,CACNoB,WAAY,WACXH,EAAmBtB,SAAU,EAC7ByB,GACD,EACAS,MAAO,WACNZ,EAAmBtB,SAAU,EAC7BmB,EAAMnB,QAAU,EAChBqB,EAAQ,GACT,EAEF,KAGCjB,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEC,OAAQ,IAAK4B,SAAU,QAASzB,SAC5CU,EAAKR,KAAI,SAACC,GACV,OAAOT,EAAAA,EAAAA,KAACgC,EAAAA,SAAQ,CAAA1B,SAA+BtC,EAAgByC,IAAzCA,EAAKrC,GAC5B,KAGH,EExFIyC,EAAmBoB,MAAMC,KAAK,CAAE7C,OAAQ,MAAS,SAAC8C,EAAGC,GAAC,OAAKA,CAAC,IAAE5B,KAAI,SAACC,GACtE,MAAO,CACN4B,KAAM,KAAO5B,EACb6B,IAAK7B,EACL8B,IAAK9B,EAAO,GAAM,EAAI,IAAM,IAE9B,IAMMG,GF8E8B4B,EAAAA,EAAAA,YAAmE5B,GEtCjG5C,EAAkB,SAAHF,GAAuC,IAAjCuE,EAAIvE,EAAJuE,KAAMC,EAAGxE,EAAHwE,IAAKC,EAAGzE,EAAHyE,IACrC,OACCE,EAAAA,EAAAA,MAAA,OAAKvC,MAAO,CAAEC,OAAQ,GAAIuC,OAAQ,kBAAmBpC,SAAA,EACpDmC,EAAAA,EAAAA,MAAA,QAAAnC,SAAA,CAAM,QAAM+B,MACZI,EAAAA,EAAAA,MAAA,QAAAnC,SAAA,CAAM,MAAIgC,MACVG,EAAAA,EAAAA,MAAA,QAAAnC,SAAA,CAAM,OAAKiC,OAGd,EAEA,EA9Cc,WACb,IAAMI,GAAoBzD,EAAAA,EAAAA,QAAiC,MAM3D,OACCuD,EAAAA,EAAAA,MAACG,EAAAA,EAAK,CAAAtC,SAAA,EACLmC,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,EACCN,EAAAA,EAAAA,KAAC6C,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAPP,WAAO,IAADC,EACC,QAAzBA,EAAAL,EAAkB/C,eAAO,IAAAoD,GAAzBA,EAA2B3B,YAC5B,EAK8Cf,SAAC,UAI5CN,EAAAA,EAAAA,KAAC6C,EAAAA,GAAM,CACNC,KAAK,UACLC,QAAS,WAAO,IAADE,EACW,QAAzBA,EAAAN,EAAkB/C,eAAO,IAAAqD,GAAzBA,EAA2BnB,OAC5B,EAAExB,SAAC,aAKLN,EAAAA,EAAAA,KAACY,EAAc,CACdX,IAAK0C,EACL5E,OAAQ,CAAE8C,IAAAA,EAAKC,cAhCG,IAgCY1C,IAAK,OACnCJ,gBAAiBA,KAElBgC,EAAAA,EAAAA,KAACkD,EAAa,CACbnF,OAAQ,CAAEE,KAAM4C,EAAK3C,WAAY,GAAIC,aAAc,GAAIC,IAAK,MAAOE,aAAc,GACjFN,gBAAiBA,MAIrB,C","sources":["views/plugin/burst/ScheduleSlicer.tsx","views/plugin/burst/VirtualScroll.tsx","views/plugin/burst/index.tsx"],"sourcesContent":["/**\r\n * @file 计划切片\r\n * @author ly\r\n * @createDate 2023年6月4日\r\n */\r\nimport React, { Fragment, forwardRef, useCallback, useRef, useState, useImperativeHandle, ForwardedRef } from 'react';\r\n\r\nlet handleIdleCallback: number;\r\n/**\r\n * @param arr 数据集合\r\n * @parma eachRenderNum 每次渲染条数\r\n * @param key 唯一值\r\n */\r\ntype ConfigParam<T> = {\r\n\tarr: T[];\r\n\teachRenderNum: number;\r\n\tkey: keyof T;\r\n};\r\n\r\n/**\r\n * @param readerComponent 渲染的组件\r\n * @param config 参数配置\r\n */\r\ntype ScheduleSlicerProps<T> = {\r\n\treaderComponent: (value: T) => React.ReactNode;\r\n\tconfig: ConfigParam<T>;\r\n};\r\n\r\n/**\r\n * @param onCallback 触发渲染事件\r\n * @param reset 暂停渲染，并清楚渲染dom\r\n */\r\nexport interface ScheduleSlicerRef {\r\n\tonCallback: () => void;\r\n\treset: () => void;\r\n}\r\n\r\ntype ForwardRefParam<T> = {\r\n\tprops: ScheduleSlicerProps<T>;\r\n\tref: ScheduleSlicerRef | null;\r\n};\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst ScheduleSlicer = <T,>({ readerComponent, config }: ForwardRefParam<T>['props'], ref: ForwardedRef<ForwardRefParam<T>['ref']>) => {\r\n\tconst { arr, eachRenderNum, key } = config;\r\n\t// 渲染次数\r\n\tconst count = useRef(0);\r\n\r\n\t// 渲染数据\r\n\tconst [list, setList] = useState<T[]>([]);\r\n\r\n\t// 中断渲染\r\n\tconst interruptRendering = useRef(false);\r\n\r\n\t// 需要渲染多少次完成所有渲染\r\n\tconst currentCount = Math.ceil(arr.length / eachRenderNum);\r\n\r\n\t// 调度渲染\r\n\tconst onCallback = useCallback(() => {\r\n\t\t// 是否中断渲染\r\n\t\tif (interruptRendering.current) return;\r\n\r\n\t\t// 当前次数大于等于最大次数,终止程序\r\n\t\tif (count.current >= currentCount) {\r\n\t\t\treturn window.cancelIdleCallback(handleIdleCallback);\r\n\t\t}\r\n\r\n\t\t// 取出本次渲染的数据\r\n\t\tconst listItem = arr.slice(count.current * eachRenderNum, (count.current + 1) * eachRenderNum);\r\n\r\n\t\t// 数据添加到本次渲染\r\n\t\tsetList((value) => {\r\n\t\t\treturn [...value, ...listItem];\r\n\t\t});\r\n\r\n\t\t// 执行下一次渲染的操作\r\n\t\tcount.current += 1;\r\n\t\thandleIdleCallback = requestIdleCallback(\r\n\t\t\t() => {\r\n\t\t\t\tonCallback();\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttimeout: 1500\r\n\t\t\t}\r\n\t\t);\r\n\t}, []);\r\n\r\n\t// 暴露调用事件\r\n\tuseImperativeHandle(ref, () => {\r\n\t\treturn {\r\n\t\t\tonCallback: () => {\r\n\t\t\t\tinterruptRendering.current = false;\r\n\t\t\t\tonCallback();\r\n\t\t\t},\r\n\t\t\treset: () => {\r\n\t\t\t\tinterruptRendering.current = true;\r\n\t\t\t\tcount.current = 0;\r\n\t\t\t\tsetList([]);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div style={{ height: 500, overflow: 'auto' }}>\r\n\t\t\t{list.map((item) => {\r\n\t\t\t\treturn <Fragment key={item[key] as React.Key}>{readerComponent(item)}</Fragment>;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst scheduleSlicerHoc = <T,>() => forwardRef<ForwardRefParam<T>['ref'], ForwardRefParam<T>['props']>(ScheduleSlicer);\r\n\r\nexport default scheduleSlicerHoc;\r\n","/**\r\n * @file 虚拟滚动\r\n * @author ly\r\n * @createDate 2023年6月4日\r\n */\r\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\r\n\r\n/**\r\n * @param data 集合数据\r\n * @param itemHeight 每一个组件高度\r\n * @param visibleCount 窗口可见的组件数量\r\n * @param visibleCount 预加载的组件数量\r\n * @param key 唯一值\r\n */\r\ntype ConfigParam<T> = {\r\n\tdata: T[];\r\n\titemHeight: number;\r\n\tvisibleCount: number;\r\n\tpreloadCount?: number;\r\n\tkey: keyof T;\r\n};\r\n\r\n/**\r\n * @param readerComponent 渲染的组件\r\n * @param config 参数配置\r\n */\r\ninterface VirtualScrollProps<T> {\r\n\treaderComponent: (item: T) => React.ReactNode;\r\n\tconfig: ConfigParam<T>;\r\n}\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst VirtualScroll = <T,>({ config, readerComponent }: VirtualScrollProps<T>) => {\r\n\tconst { data, itemHeight, visibleCount, key, preloadCount = 6 } = config;\r\n\r\n\t// 本次渲染开始位置\r\n\tconst [start, setStart] = useState(0);\r\n\r\n\t// 本次渲染结束位置\r\n\tconst [end, setEnd] = useState(visibleCount);\r\n\r\n\t// 外层ref 用于获取滚动位置\r\n\tconst containerRef = useRef<HTMLDivElement>(null);\r\n\r\n\t// 总高度 =  总数 * 一行高度\r\n\tconst totalHeight = useMemo(() => data.length * itemHeight, [data, itemHeight]);\r\n\r\n\t// 可视高度 = 渲染总条数 * 一行高度\r\n\tconst containerHeight = useMemo(() => visibleCount * itemHeight, [visibleCount, itemHeight]);\r\n\r\n\t// 滚动执行函数\r\n\tconst handleScroll = useCallback(() => {\r\n\t\tconst scrollTop = containerRef.current?.scrollTop ?? 0;\r\n\t\tconst start = Math.floor(scrollTop / itemHeight);\r\n\t\tconst end = Math.min(start + visibleCount, data.length);\r\n\r\n\t\tsetStart(start);\r\n\t\tsetEnd(end);\r\n\t}, [data.length, itemHeight, visibleCount]);\r\n\r\n\treturn (\r\n\t\t<div ref={containerRef} style={{ height: containerHeight, overflowY: 'auto' }} onScroll={handleScroll}>\r\n\t\t\t<div style={{ height: totalHeight }}>\r\n\t\t\t\t{/* 渲染总条数 = 渲染数据 + 预渲染条数 */}\r\n\t\t\t\t{data.slice(start, end + preloadCount).map((item) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={item[key] as React.Key} style={{ transform: `translateY(${start * itemHeight}px)` }}>\r\n\t\t\t\t\t\t\t{readerComponent(item)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default VirtualScroll;\r\n","/**\r\n * @file 数据切片\r\n * @author ly\r\n * @createDate 2023年3月17日\r\n */\r\nimport React, { useRef } from 'react';\r\nimport { Button } from 'antd';\r\nimport Icard from '@/antdComponents/iCard';\r\nimport VirtualScroll from './VirtualScroll';\r\nimport scheduleSlicerHoc, { ScheduleSlicerRef } from './ScheduleSlicer';\r\n\r\n/**\r\n * @param name 姓名\r\n * @param age 年龄\r\n * @param sex 性别\r\n */\r\ntype listParam = {\r\n\tname: string;\r\n\tage: number;\r\n\tsex: string;\r\n};\r\n\r\nlet arr: listParam[] = Array.from({ length: 40000 }, (v, k) => k).map((item) => {\r\n\treturn {\r\n\t\tname: '张三' + item,\r\n\t\tage: item,\r\n\t\tsex: item % 2 === 0 ? '男' : '女'\r\n\t};\r\n});\r\n\r\n// 每次渲染数量\r\nconst eachRenderNum = 400;\r\n\r\n// 初始化ScheduleSlicer组件\r\nconst ScheduleSlicer = scheduleSlicerHoc<listParam>();\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst Burst = () => {\r\n\tconst ScheduleSlicerRef = useRef<ScheduleSlicerRef | null>(null);\r\n\r\n\tconst onCallback = () => {\r\n\t\tScheduleSlicerRef.current?.onCallback();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Icard>\r\n\t\t\t<div>\r\n\t\t\t\t<Button type=\"primary\" onClick={onCallback}>\r\n\t\t\t\t\t优化渲染\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tScheduleSlicerRef.current?.reset();\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t清除数据\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<ScheduleSlicer\r\n\t\t\t\tref={ScheduleSlicerRef}\r\n\t\t\t\tconfig={{ arr, eachRenderNum, key: 'age' }}\r\n\t\t\t\treaderComponent={readerComponent}></ScheduleSlicer>\r\n\t\t\t{/* 性能要求还是得要虚拟加载 */}\r\n\t\t\t<VirtualScroll<listParam>\r\n\t\t\t\tconfig={{ data: arr, itemHeight: 50, visibleCount: 10, key: 'age', preloadCount: 2 }}\r\n\t\t\t\treaderComponent={readerComponent}\r\n\t\t\t/>\r\n\t\t</Icard>\r\n\t);\r\n};\r\n\r\nconst readerComponent = ({ name, age, sex }: listParam) => {\r\n\treturn (\r\n\t\t<div style={{ height: 50, border: '1px solid blue' }}>\r\n\t\t\t<span> 姓名: {name}</span>\r\n\t\t\t<span>年龄:{age}</span>\r\n\t\t\t<span> 性别:{sex}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Burst;\r\n"],"names":["handleIdleCallback","_ref","config","readerComponent","data","itemHeight","visibleCount","key","_config$preloadCount","preloadCount","_useState","useState","_useState2","_slicedToArray","start","setStart","_useState3","_useState4","end","setEnd","containerRef","useRef","totalHeight","useMemo","length","containerHeight","handleScroll","useCallback","_containerRef$current","_containerRef$current2","scrollTop","current","Math","floor","min","_jsx","ref","style","height","overflowY","onScroll","children","slice","map","item","transform","concat","ScheduleSlicer","arr","eachRenderNum","count","list","setList","interruptRendering","currentCount","ceil","onCallback","window","cancelIdleCallback","listItem","value","_toConsumableArray","requestIdleCallback","timeout","useImperativeHandle","reset","overflow","Fragment","Array","from","v","k","name","age","sex","forwardRef","_jsxs","border","ScheduleSlicerRef","Icard","Button","type","onClick","_ScheduleSlicerRef$cu","_ScheduleSlicerRef$cu2","VirtualScroll"],"sourceRoot":""}