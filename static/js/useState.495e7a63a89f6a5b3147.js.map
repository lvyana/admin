{"version":3,"file":"static/js/useState.495e7a63a89f6a5b3147.js","mappings":"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","sources":["antdComponents/iCollapse/index.tsx","antdComponents/iCollapse/useStyleHooks.tsx","pluginComponents/iCodeEditor/index.tsx","views/react/hooks/useState/index.tsx","views/react/hooks/useSyncExternalStore/todosStore.ts","views/react/hooks/useSyncExternalStore/index.tsx"],"sourcesContent":["/**\r\n * @file 折叠面板\r\n * @author ly\r\n * @createDate 2023年4月5日\r\n */\r\nimport React, { FC, ReactNode } from 'react';\r\nimport { Collapse, CollapseProps } from 'antd';\r\nimport useStyleHooks from './useStyleHooks';\r\n\r\n/**\r\n * @param list 渲染数据\r\n * @param defaultActiveKey 初始化选中面板的 key\r\n * @param styleConfig 配置面板颜色主题类型\r\n * @param bordered 带边框风格的折叠面板\r\n * @param onChange 切换面板的回调\r\n * @param style 面板css样式\r\n * @param expandIcon 自定义切换图标\r\n */\r\nexport type IcollapseProps<T> = {\r\n\tlist: CollapseProps['items'];\r\n\tdefaultActiveKey?: T[];\r\n\tstyleConfig?: '1';\r\n\tbordered?: boolean;\r\n\tonChange?: (key: string | string[]) => void;\r\n\tstyle?: React.CSSProperties;\r\n\texpandIcon?: (value: { isActive?: boolean }) => ReactNode;\r\n};\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst Icollapse = <T extends string | number>({\r\n\tlist,\r\n\tdefaultActiveKey,\r\n\tstyleConfig,\r\n\tbordered = true,\r\n\tonChange,\r\n\texpandIcon,\r\n\tstyle\r\n}: IcollapseProps<T>) => {\r\n\t// 折叠面板样式配置\r\n\tconst styleConfigParams = useStyleHooks({ list, styleConfig, style, bordered });\r\n\r\n\treturn (\r\n\t\t<Collapse\r\n\t\t\tbordered={styleConfigParams.bordered}\r\n\t\t\tdefaultActiveKey={defaultActiveKey}\r\n\t\t\tonChange={onChange}\r\n\t\t\texpandIcon={expandIcon}\r\n\t\t\tstyle={styleConfigParams.style}\r\n\t\t\titems={styleConfigParams.list}></Collapse>\r\n\t);\r\n};\r\n\r\nexport default Icollapse;\r\n","/**\r\n * @file 折叠面板主题样式配置\r\n * @author ly\r\n * @createDate 2023年5月12日\r\n */\r\nimport React from 'react';\r\nimport type { IcollapseProps } from './index';\r\nimport useThemeHooks from '@/config/antd/theme/useThemeHooks';\r\n\r\ntype UseStyleHooksProps<T> = Pick<IcollapseProps<T>, 'list' | 'styleConfig' | 'style' | 'bordered'>;\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst useStyleHooks = <T,>({ list, styleConfig, style, bordered }: UseStyleHooksProps<T>) => {\r\n\tconst { token } = useThemeHooks();\r\n\r\n\tconst ListStyle = {\r\n\t\tmarginBottom: 24,\r\n\t\tbackground: token.colorFillAlter,\r\n\t\tborderRadius: token.borderRadiusLG,\r\n\t\tborder: 'none'\r\n\t};\r\n\r\n\tif (styleConfig === '1') {\r\n\t\tconst listOne = list?.map((item) => {\r\n\t\t\treturn {\r\n\t\t\t\t...item,\r\n\t\t\t\tstyle: ListStyle\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn { list: listOne, style: { background: token.colorBgContainer }, bordered: false };\r\n\t}\r\n\r\n\t// 默认配置\r\n\treturn { list, styleConfig, style, bordered };\r\n};\r\n\r\nexport default useStyleHooks;\r\n","/**\r\n * @file 代码编辑器\r\n * @author ly\r\n * @createDate\r\n */\r\nimport React, { FC, useState } from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css'; //Example style, you can use another\r\n\r\ntype IcodeEditorProps = {\r\n\tinitCode: string;\r\n};\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst IcodeEditor: FC<IcodeEditorProps> = ({ initCode = `function add(a, b) {\\n  return a + b;\\n}` }) => {\r\n\tconst [code, setCode] = useState(initCode);\r\n\r\n\treturn (\r\n\t\t<Editor\r\n\t\t\tvalue={code}\r\n\t\t\tonValueChange={(code) => setCode(code)}\r\n\t\t\thighlight={(code) => highlight(code, languages.js, 'jsx')}\r\n\t\t\tpadding={10}\r\n\t\t\tstyle={{\r\n\t\t\t\t// fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n\t\t\t\tfontSize: 14\r\n\t\t\t}}\r\n\t\t\treadOnly={true}\r\n\t\t\tdisabled={true}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default IcodeEditor;\r\n","/**\r\n * @file useState\r\n * @author ly\r\n * @createDate 2020年4月27日\r\n */\r\nimport React, { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport Icard from '@/antdComponents/iCard';\r\nimport Icollapse from '@/antdComponents/iCollapse';\r\nimport IcodeEditor from '@/pluginComponents/iCodeEditor';\r\nimport { IuseSyncExternalStoreItem } from '../useSyncExternalStore';\r\nimport Imarkdown from '@/pluginComponents/iMarkdown';\r\n\r\nconst initCode = `\r\nimport { useState } from 'react';\r\n\r\nexport default function Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  function handleClick() {\r\n    setCount(count + 1);\r\n  }\r\n\r\n  return (\r\n    <button onClick={handleClick}>\r\n      You pressed me {count} times\r\n    </button>\r\n  );\r\n};`;\r\n\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst IuseState = () => {\r\n\tconst init = 0;\r\n\r\n\tconst [value, setValue] = useState(init);\r\n\r\n\tconst [first, setfirst] = useState(() => init);\r\n\t// console.log('reader');\r\n\r\n\tconst add = () => {\r\n\t\t// setValue(value + 1);\r\n\t\t// setfirst((value) => value + 1);\r\n\t\t// setfirst((value) => {\r\n\t\t// \t// console.log(value);\r\n\t\t// \treturn value + 1;\r\n\t\t// });\r\n\t\t// 17 异步更新会render两次\r\n\t\t// 18 异步更新会render1次\r\n\t\tsetTimeout(() => setValue(value + 1), 1000);\r\n\t\tsetTimeout(() => setValue(value + 1), 1000);\r\n\t\tsetTimeout(() => setfirst(first + 1), 2000);\r\n\t\t// setValue((value) => value + 1);\r\n\t\t// setTimeout(() => setValue((value) => value + 1), 1000);\r\n\t\t// setTimeout(() => setValue((value) => value + 1), 1000);\r\n\t\t// setTimeout(() => setfirst((first) => first + 1), 1000);\r\n\t\t// console.log(value);\r\n\t\t// console.log(first);\r\n\t};\r\n\r\n\tconst list = [\r\n\t\t{\r\n\t\t\tlabel: 'useState在组件式编程里的基本用处',\r\n\t\t\tchildren: <div>useState 是一个组件定义状态信息,所谓“状态”,就是该组件任意时刻都存放的各种数据</div>,\r\n\t\t\tkey: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'useState更新',\r\n\t\t\tchildren: (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div>1、当组件更新state时,会触发组件的重新渲染,可以认为发生了局部刷新</div>\r\n\t\t\t\t\t<div>2、在函数内多次更新,会合并处理</div>\r\n\t\t\t\t\t<div>3、18之前手动合并处理unstable_batchedUpdates,18之后自动合并处理就不需要了</div>\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tkey: '1'\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: '代码示例',\r\n\t\t\tchildren: (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<IcodeEditor initCode={initCode}></IcodeEditor>\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tkey: '2'\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<Icard>\r\n\t\t\t<Button type=\"link\" onClick={add}>\r\n\t\t\t\t+1\r\n\t\t\t</Button>\r\n\t\t\t{value}\r\n\t\t\t{first}\r\n\t\t\t<Icollapse styleConfig=\"1\" defaultActiveKey={['0']} list={list}></Icollapse>\r\n\t\t\t<IuseSyncExternalStoreItem></IuseSyncExternalStoreItem>\r\n\t\t\t<Imarkdown url={'useState.md'}></Imarkdown>\r\n\t\t</Icard>\r\n\t);\r\n};\r\n\r\nexport default IuseState;\r\n","let nextId = 0;\r\nlet todos = [{ id: nextId++, text: 'Todo #1' }];\r\nlet listeners: (() => void)[] = [];\r\n\r\nconst todosStore = {\r\n\taddTodo() {\r\n\t\ttodos = [...todos, { id: nextId++, text: 'Todo #' + nextId }];\r\n\t\temitChange();\r\n\t},\r\n\tdeleteTodo() {\r\n\t\ttodos = todos.filter((item, i) => {\r\n\t\t\treturn i !== 0;\r\n\t\t});\r\n\t\temitChange();\r\n\t},\r\n\tsubscribe(listener: () => void) {\r\n\t\tlisteners = [...listeners, listener];\r\n\t\t// console.log(listeners);\r\n\r\n\t\treturn () => {\r\n\t\t\tlisteners = listeners.filter((l) => l !== listener);\r\n\t\t};\r\n\t},\r\n\tgetSnapshot() {\r\n\t\treturn todos;\r\n\t}\r\n};\r\n\r\nfunction emitChange() {\r\n\tfor (let listener of listeners) {\r\n\t\t// console.log(listener);\r\n\r\n\t\tlistener();\r\n\t}\r\n}\r\n\r\nexport default todosStore;\r\n","/**\r\n * @file useSyncExternalStore\r\n * @author ly\r\n * @createDate 2023年5月19日\r\n */\r\nimport React, { useSyncExternalStore } from 'react';\r\nimport todosStore from './todosStore';\r\nimport Icard from '@/antdComponents/iCard';\r\nimport { IbuttonItem } from '@/antdComponents/iButton/IbuttonItem';\r\nimport type { ButtonItemParams } from '@/antdComponents/iButton/type';\r\nimport Icollapse from '@/antdComponents/iCollapse';\r\n\r\nconst BUTTON_ITEM: ButtonItemParams<'key'> = {\r\n\tname: 'Add todo',\r\n\ttype: 'key',\r\n\tbtnType: 'primary'\r\n};\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nexport const IuseSyncExternalStore = () => {\r\n\tconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\r\n\r\n\treturn (\r\n\t\t<Icard>\r\n\t\t\t<IbuttonItem buttonItem={BUTTON_ITEM} onClick={() => todosStore.addTodo()}></IbuttonItem>\r\n\t\t\t<hr />\r\n\t\t\t<ul>\r\n\t\t\t\t{todos.map((todo) => (\r\n\t\t\t\t\t<li key={todo.id}>{todo.text}</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t\t<IuseSyncExternalStoreItem></IuseSyncExternalStoreItem>\r\n\t\t\t<Idocment></Idocment>\r\n\t\t</Icard>\r\n\t);\r\n};\r\n\r\nexport const IuseSyncExternalStoreItem = () => {\r\n\tconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>测试: useSyncExternalStore数据可以共享</div>\r\n\t\t\t<IbuttonItem buttonItem={BUTTON_ITEM} onClick={() => todosStore.addTodo()}></IbuttonItem>\r\n\t\t\t<IbuttonItem buttonItem={{ ...BUTTON_ITEM, name: 'delete todo' }} onClick={() => todosStore.deleteTodo()}></IbuttonItem>\r\n\r\n\t\t\t<hr />\r\n\t\t\t<ul>\r\n\t\t\t\t{todos.map((todo) => (\r\n\t\t\t\t\t<li key={todo.id}>{todo.text}</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst DOCUMENT_LIST = [\r\n\t{\r\n\t\theader: 'useSyncExternalStore 参数说明',\r\n\t\tcontent: (\r\n\t\t\t<>\r\n\t\t\t\t<div>useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot)</div>\r\n\t\t\t\t<div>subscribe函数得订阅这个store, 并且返回一个可以取消订阅的函数。</div>\r\n\t\t\t\t<div>getSnapshot函数得可以从store里读取数据快照。</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tsubscribe: 是一个函数，只有一个回调函数作为入参，并且使其订阅这个store.\r\n\t\t\t\t\t当store发生改变的时候，这个回调函数应该得到执行，而且这会触发组件的重新渲染。subscribe函数应该返回一个可以取消订阅的方法。\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tgetSnapshot:\r\n\t\t\t\t\t是一个函数，返回一个组件中需要用到的store里的一个数据值的快照。当这个store没有改变的时候，重复调用getSnapshot必须返回同样的值。如果store发生改变并且返回的数据值不一样了（用Object.js做比较），那么Reacr重新渲染这个组件。\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tgetServerSnapshot（可选参数）:\r\n\t\t\t\t\t是一个函数，返回store数据的初始快照。只会在服务端渲染的时候使用，并且是在服务端渲染好的内容往客户端灌水的时候。服务端的快照必须和客户端的一致。并且通常是序列化后被发送到客户端的，如果你不传这个参数，在服务端渲染的时候会报错\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div>当前你在组件渲染中使用到的store数据的快照</div>\r\n\t\t\t\t<div>警告</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t调用getSnapshot返回的这个store数据快照不能修改，如果所依赖的store有可以更改的数据，当数据发生改变返回新的不可修改的数据，否则返回上一次缓存的数据快照。\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t如果在重新渲染的时候传来一个不同的subscribe函数，React会用新的subscribe重新订阅这个store。你可以通过在组件外面声明subscribe的方式来避免\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t),\r\n\t\tkey: '1'\r\n\t}\r\n];\r\nconst Idocment = () => {\r\n\treturn <Icollapse list={DOCUMENT_LIST}></Icollapse>;\r\n};\r\nexport default IuseSyncExternalStore;\r\n\r\n// https://juejin.cn/post/7217743118324858938\r\n// useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\r\n// 这个hook会返回store里一个数据的快照。你需要传入两个函数作为入参\r\n\r\n// subscribe函数得订阅这个store, 并且返回一个可以取消订阅的函数。\r\n// getSnapshot函数得可以从store里读取数据快照。\r\n\r\n// subscribe: 是一个函数，只有一个回调函数作为入参，并且使其订阅这个store. 当store发生改变的时候，这个回调函数应该得到执行，而且这会触发组件的重新渲染。subscribe函数应该返回一个可以取消订阅的方法。\r\n\r\n// getSnapshot: 是一个函数，返回一个组件中需要用到的store里的一个数据值的快照。当这个store没有改变的时候，重复调用getSnapshot必须返回同样的值。如果store发生改变并且返回的数据值不一样了（用Object.js做比较），那么Reacr重新渲染这个组件。\r\n\r\n// getServerSnapshot（可选参数）: 是一个函数，返回store数据的初始快照。只会在服务端渲染的时候使用，并且是在服务端渲染好的内容往客户端灌水的时候。服务端的快照必须和客户端的一致。并且通常是序列化后被发送到客户端的，如果你不传这个参数，在服务端渲染的时候会报错\r\n\r\n// 当前你在组件渲染中使用到的store数据的快照\r\n\r\n// 警告\r\n// 调用getSnapshot返回的这个store数据快照不能修改，如果所依赖的store有可以更改的数据，当数据发生改变返回新的不可修改的数据，否则返回上一次缓存的数据快照。\r\n// 如果在重新渲染的时候传来一个不同的subscribe函数，React会用新的subscribe重新订阅这个store。你可以通过在组件外面声明subscribe的方式来避免\r\n"],"names":["_ref","list","defaultActiveKey","styleConfig","_ref$bordered","bordered","onChange","expandIcon","styleConfigParams","style","token","useThemeHooks","ListStyle","marginBottom","background","colorFillAlter","borderRadius","borderRadiusLG","border","map","item","_objectSpread","colorBgContainer","useStyleHooks","_jsx","Collapse","items","_ref$initCode","initCode","_useState","useState","_useState2","_slicedToArray","code","setCode","Editor","value","onValueChange","highlight","languages","js","padding","fontSize","readOnly","disabled","setValue","_useState3","_useState4","first","setfirst","label","children","key","_jsxs","_Fragment","IcodeEditor","Icard","Button","type","onClick","setTimeout","Icollapse","IuseSyncExternalStoreItem","Imarkdown","url","nextId","todos","id","text","listeners","emitChange","_step","_iterator","_createForOfIteratorHelper","s","n","done","listener","err","e","f","addTodo","concat","_toConsumableArray","deleteTodo","filter","i","subscribe","l","getSnapshot","BUTTON_ITEM","name","btnType","IuseSyncExternalStore","useSyncExternalStore","todosStore","IbuttonItem","buttonItem","todo","Idocment","DOCUMENT_LIST","header","content"],"sourceRoot":""}