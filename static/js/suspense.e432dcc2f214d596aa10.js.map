{"version":3,"file":"static/js/suspense.e432dcc2f214d596aa10.js","mappings":"yLA6BMA,EAAsB,SAAHC,GAAwB,IAAlBC,EAAKD,EAALC,MAAOC,EAAGF,EAAHE,IAC7BC,EAAcF,EAAdE,KAAMC,EAAQH,EAARG,IAEd,OACCC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,uBAAqBJ,EAAK,QAC/BE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,SAAOL,EAAI,QAChBG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,kBAAgBH,EAAI,SAG5B,EAEMI,EAAU,WACf,OAAO,IAAIC,SAAQ,SAACC,GAEnBC,YAAW,WACVD,EAAQ,CACPP,KAAM,QACNC,IAAK,uBAEP,GAAG,IACJ,GACD,EAkBA,UApDkB,WAEjB,IAwCuBQ,EAAgCC,EACjDC,EAzCAC,GAwCiBH,EAxCSb,EAwCuBc,EAxCjBL,EAyChCM,EAAwB,WAAH,OAC1B,IAAIL,QAAO,eAAAO,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOV,GAAO,IAAAW,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACNZ,IAAM,KAAD,EAAlBQ,EAAIE,EAAAG,KACVhB,EAAQ,CACPiB,QAAS,SAACC,GAA8B,OAAKC,EAAAA,EAAAA,KAACjB,GAASkB,EAAAA,EAAAA,GAAA,CAAC7B,MAAOoB,EAAMnB,IAAK,IAAQ0B,GAAS,IACzF,wBAAAL,EAAAQ,OAAA,GAAAX,EAAA,KACH,gBAAAY,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAE,CAAF,CALU,GAKR,EACGC,EAAAA,KAAWrB,IA9ClB,OACCe,EAAAA,EAAAA,KAACO,EAAAA,SAAQ,CAACC,UAAUR,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAA/B,SAAE,gBAAeA,UACpCsB,EAAAA,EAAAA,KAACd,EAAQ,KAGZ,C","sources":["views/react/reactDom/suspense/index.tsx"],"sourcesContent":["/**\r\n * @file Suspense 实现异步渲染\r\n * @author ly\r\n * @createDate 2022年8月3日\r\n */\r\nimport React, { ComponentType, FC, Suspense } from 'react';\r\nimport Icard from '@/antdComponents/iCard';\r\n\r\ninterface TestProps {\r\n\tage: number;\r\n\trdata: {\r\n\t\tname: string;\r\n\t\tsay: string;\r\n\t};\r\n}\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst Isuspense = () => {\r\n\t/* 需要每一次在组件内部声明，保证每次父组件挂载，都会重新请求数据 ，防止内存泄漏。 */\r\n\tconst LazyTest = AysncComponent(Test, getData);\r\n\r\n\treturn (\r\n\t\t<Suspense fallback={<>loading....</>}>\r\n\t\t\t<LazyTest></LazyTest>\r\n\t\t</Suspense>\r\n\t);\r\n};\r\n\r\n/* 测试异步组件 */\r\nconst Test: FC<TestProps> = ({ rdata, age }) => {\r\n\tconst { name, say } = rdata;\r\n\t// console.log('组件渲染');\r\n\treturn (\r\n\t\t<Icard>\r\n\t\t\t<div> hello , my name is {name} </div>\r\n\t\t\t<div>age : {age} </div>\r\n\t\t\t<div> i want to say {say} </div>\r\n\t\t</Icard>\r\n\t);\r\n};\r\n\r\nconst getData = (): Promise<TestProps['rdata']> => {\r\n\treturn new Promise((resolve) => {\r\n\t\t//模拟异步\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\tname: 'alien',\r\n\t\t\t\tsay: 'let us learn React!'\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t});\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} Component  需要异步数据的component\r\n * @param {*} api        请求数据接口,返回Promise，可以再then中获取与后端交互的数据\r\n * @returns\r\n */\r\nconst AysncComponent = (Component: React.FC<TestProps>, api: () => Promise<TestProps['rdata']>) => {\r\n\tconst AysncComponentPromise = (): Promise<{ default: ComponentType }> =>\r\n\t\tnew Promise(async (resolve) => {\r\n\t\t\tconst data = await api();\r\n\t\t\tresolve({\r\n\t\t\t\tdefault: (props: JSX.IntrinsicAttributes) => <Component rdata={data} age={18} {...props} />\r\n\t\t\t});\r\n\t\t});\r\n\treturn React.lazy(AysncComponentPromise);\r\n};\r\nexport default Isuspense;\r\n"],"names":["Test","_ref","rdata","age","name","say","_jsxs","Icard","children","getData","Promise","resolve","setTimeout","Component","api","AysncComponentPromise","LazyTest","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","sent","default","props","_jsx","_objectSpread","stop","_x","apply","arguments","React","Suspense","fallback","_Fragment"],"sourceRoot":""}