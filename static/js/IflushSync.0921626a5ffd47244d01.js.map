{"version":3,"file":"static/js/IflushSync.0921626a5ffd47244d01.js","mappings":"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","sources":["../node_modules/easy-typer-js/src/lib/index.js","pluginComponents/iEasyTyper/index.tsx","views/react/reactDom/flushSync/index.tsx"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass EasyTyper {\r\n    constructor(obj, input, fn, hooks) {\r\n        checkKeyIsNull(obj);\r\n        checkFieldIsError(obj);\r\n        this.obj = obj;\r\n        this.input = typeof input === 'string' ? [input] : input;\r\n        this.fn = typeof fn === 'function' ? fn : function () { };\r\n        this.hooks = typeof hooks === 'function' ? hooks : function () { };\r\n        this.timer = 0;\r\n        this.typeAction = {\r\n            rollback: this.typedBack.bind(this),\r\n            normal: this.play.bind(this),\r\n            custom: this.fn\r\n        };\r\n        // 实例化完后立即执行打字输出\r\n        this.init();\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.play();\r\n    }\r\n    // 打字\r\n    play() {\r\n        if (!this.input.length)\r\n            return this.fn(this);\r\n        let i = 0, stop = false, input = this.input.shift() || '';\r\n        this.timer = setInterval(() => {\r\n            if (i === input.length) {\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd)\r\n                return this.closeTimer();\r\n            if (stop)\r\n                return this.nextTick();\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i++;\r\n        }, this.obj.speed);\r\n    }\r\n    // 回滚方法\r\n    typedBack() {\r\n        // 如果句子出书完毕，且是句子暂停模式\r\n        if (!this.input.length && this.obj.sentencePause)\r\n            return this.fn(this);\r\n        let input = this.obj.output;\r\n        let i = input.length, stop = false;\r\n        this.timer = setInterval(() => {\r\n            if (i === -1) {\r\n                this.obj.output = '';\r\n                this.hooks('', this);\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd) {\r\n                this.closeTimer();\r\n                return this.obj.singleBack = false;\r\n            }\r\n            if (stop) {\r\n                this.obj.singleBack = false;\r\n                return (() => {\r\n                    const { length } = this.input;\r\n                    return length ? this.play() : this.fn(this);\r\n                })();\r\n            }\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i--;\r\n        }, this.obj.backSpeed);\r\n    }\r\n    // 下一次触发方式\r\n    nextTick() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // 等待\r\n            yield this.sleep(this.obj.sleep);\r\n            return this.obj.singleBack ? this.typedBack() : this.getOutputType();\r\n        });\r\n    }\r\n    // 输出方式\r\n    getOutputType() {\r\n        return this.typeAction[this.obj.type](this);\r\n    }\r\n    // 关闭定时器\r\n    closeTimer() {\r\n        clearInterval(this.timer);\r\n    }\r\n    // 线程等待\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    // 结束\r\n    close() {\r\n        return this.obj.isEnd = true;\r\n    }\r\n}\r\n// 错误提示语\r\nconst errorTip = (message) => {\r\n    throw new Error(message);\r\n};\r\n// 校验参数完整性\r\nconst checkKeyIsNull = (obj) => {\r\n    const props = {\r\n        output: '',\r\n        type: '',\r\n        isEnd: false,\r\n        speed: 80,\r\n        backSpeed: 40,\r\n        sleep: 3000,\r\n        singleBack: false,\r\n        sentencePause: false\r\n    };\r\n    const propsKeys = Object.keys(props);\r\n    const objKeys = Object.keys(obj);\r\n    if (propsKeys.length !== objKeys.length) {\r\n        errorTip('配置对象错误: 字段数量不正确！');\r\n    }\r\n    propsKeys.forEach(key => {\r\n        if (obj[key] === undefined || obj[key] === null) {\r\n            errorTip('配置对象错误：字段值为null或undefined！');\r\n        }\r\n    });\r\n};\r\n// 检验参数类型\r\nconst checkFieldIsError = (obj) => {\r\n    Object.keys(obj).forEach(key => {\r\n        const proxy = EasyTyperStrategy[key](obj);\r\n        if (proxy.check()) {\r\n            proxy.showTip(key);\r\n        }\r\n    });\r\n};\r\n// 策略分发\r\nconst EasyTyperStrategy = (() => ({\r\n    output: (obj) => {\r\n        return new CheckField(`string`, obj.output);\r\n    },\r\n    type: (obj) => {\r\n        return new CheckField(`string`, obj.type);\r\n    },\r\n    isEnd: (obj) => {\r\n        return new CheckField(`boolean`, obj.isEnd);\r\n    },\r\n    speed: (obj) => {\r\n        return new CheckField(`number`, obj.speed);\r\n    },\r\n    backSpeed: (obj) => {\r\n        return new CheckField(`number`, obj.backSpeed);\r\n    },\r\n    sleep: (obj) => {\r\n        return new CheckField(`number`, obj.sleep);\r\n    },\r\n    singleBack: (obj) => {\r\n        return new CheckField(`boolean`, obj.singleBack);\r\n    },\r\n    sentencePause: (obj) => {\r\n        return new CheckField(`boolean`, obj.sentencePause);\r\n    },\r\n}))();\r\n// 字段校验类\r\nclass CheckField {\r\n    constructor(type, field) {\r\n        this.type = type;\r\n        this.field = field;\r\n    }\r\n    check() {\r\n        return typeof this.field !== `${this.type}`;\r\n    }\r\n    showTip(name) {\r\n        errorTip(`配置对象错误：属性 ${name} 必须为 ${this.type} 类型！`);\r\n    }\r\n}\r\nexport default EasyTyper;\r\n","/**\r\n * @file EasyTyper\r\n * @author ly\r\n * @createDate 2023年3月11日\r\n */\r\nimport React, { useLayoutEffect, useState } from 'react';\r\nimport EasyTyper from 'easy-typer-js';\r\n\r\n/**\r\n * easy-typer-js是一个轻量级的插件, 用于实现页面文字的打字机效果.\r\n * 它使用起来非常简单, 只需要几行代码就能实现高大上的打字机效果.而且对MVVM框架支持完美，还兼容原生JS.\r\n */\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst useEasyTyper = (str: string) => {\r\n\tconst [output, setOutput] = useState('');\r\n\r\n\tconst [typer, setTyper] = useState<EasyTyper | null>(null);\r\n\r\n\tuseLayoutEffect(() => {\r\n\t\tinitTyper();\r\n\t\treturn () => {\r\n\t\t\ttyper?.close();\r\n\t\t};\r\n\t}, []);\r\n\r\n\tconst initTyper = () => {\r\n\t\t// 配置对象\r\n\t\tconst obj = {\r\n\t\t\toutput: '',\r\n\t\t\tisEnd: false,\r\n\t\t\tspeed: 80,\r\n\t\t\tsingleBack: false,\r\n\t\t\tsleep: 0,\r\n\t\t\ttype: 'normal',\r\n\t\t\tbackSpeed: 40,\r\n\t\t\tsentencePause: false\r\n\t\t};\r\n\t\t// 实例化\r\n\t\tconst typer = new EasyTyper(obj, str, completeAsentence, changeOutput);\r\n\t\tsetTyper(typer);\r\n\t};\r\n\r\n\t// 输出完毕后的回调函数\r\n\tconst completeAsentence = () => {\r\n\t\t// console.log('输出完毕！长官！');\r\n\t};\r\n\r\n\t// 钩子函数和setState结合\r\n\tconst changeOutput = (output: string) => {\r\n\t\tsetOutput(output);\r\n\t};\r\n\r\n\treturn { output };\r\n};\r\n\r\nexport default useEasyTyper;\r\n","/**\r\n * @file flushSync\r\n * @author ly\r\n * @createDate 2023年3月10日\r\n */\r\nimport React, { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport { flushSync } from 'react-dom';\r\nimport useEasyTyper from '@/pluginComponents/iEasyTyper';\r\nimport Icard from '@/antdComponents/iCard';\r\n\r\n/**\r\n * flushSync：可以将回调函数中的更新任务，\r\n * 放到一个较高级的优先级中，适用于强制刷新，同时确保了DOM会被立即更新\r\n */\r\n// #----------- 上: ts类型定义 ----------- 分割线 ----------- 下: JS代码 -----------\r\n\r\nconst IflushSync = () => {\r\n\tconst { output } = useEasyTyper(\r\n\t\t'flushSync：可以将回调函数中的更新任务， 放到一个较高级的优先级中，适用于强制刷新，同时确保了DOM会被立即更新'\r\n\t);\r\n\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tconst onCount = () => {\r\n\t\tsetCount(1);\r\n\t\tflushSync(() => {\r\n\t\t\tsetCount(2);\r\n\t\t});\r\n\t\tsetCount(3);\r\n\t};\r\n\t// console.log(count);\r\n\r\n\treturn (\r\n\t\t<Icard>\r\n\t\t\t<div> {output}</div>\r\n\r\n\t\t\t<div style={{ padding: 20 }}>\r\n\t\t\t\t<div>数字: {count}</div>\r\n\t\t\t\t<Button color=\"primary\" onClick={onCount}>\r\n\t\t\t\t\t点击\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</Icard>\r\n\t);\r\n};\r\n\r\nexport default IflushSync;\r\n"],"names":["EasyTyper","obj","input","fn","hooks","_classCallCheck","checkKeyIsNull","checkFieldIsError","this","timer","typeAction","rollback","typedBack","bind","normal","play","custom","init","_createClass","key","value","_this","length","i","stop","shift","setInterval","closeTimer","isEnd","nextTick","output","slice","speed","_this2","sentencePause","singleBack","backSpeed","thisArg","_arguments","P","generator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sleep","abrupt","getOutputType","Promise","resolve","reject","fulfilled","step","e","rejected","result","done","then","apply","type","clearInterval","ms","setTimeout","errorTip","message","Error","propsKeys","Object","keys","objKeys","forEach","undefined","proxy","EasyTyperStrategy","check","showTip","CheckField","field","concat","name","str","_useState","useState","_useState2","_slicedToArray","setOutput","_useState3","_useState4","typer","setTyper","useLayoutEffect","initTyper","close","completeAsentence","changeOutput","useEasyTyper","count","setCount","_jsxs","Icard","children","style","padding","_jsx","Button","color","onClick","flushSync"],"sourceRoot":""}